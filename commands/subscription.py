import asyncio
import logging
from aiogram import types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice, Message, CallbackQuery
from payments import create_payment, check_payment
from db import add_subscription, get_all_subscriptions, remove_expired_subscription, get_subscription_status
from datetime import datetime, timedelta

async def handle_subscription(message: Message):
    user_id = message.from_user.id
    
    # Check if user already has an active subscription
    subscription_date = get_subscription_status(user_id)
    
    if subscription_date:
        # Check if subscription is still active
        if isinstance(subscription_date, str):
            expiration_date = datetime.fromisoformat(subscription_date)
        else:
            expiration_date = subscription_date
            
        current_time = datetime.now()
        
        if current_time < expiration_date:
            await message.answer(f"‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {expiration_date.strftime('%Y-%m-%d')}!")
            return
    
    # If no active subscription, show payment options
    amount = 10
    
    pay_button = InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"payment_options_{user_id}_{amount}")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[pay_button]])
    await message.answer("–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=keyboard)

async def check_payment_status(callback_query: CallbackQuery):
    # Parse callback data: "check_payment_{user_id}_{timestamp}_{amount}"
    callback_data_parts = callback_query.data.split('_')
    
    # Reconstruct the label from parts 2 and 3 (user_id_timestamp)
    if len(callback_data_parts) >= 5:  # check_payment_{user_id}_{timestamp}_{amount}
        label = f"{callback_data_parts[2]}_{callback_data_parts[3]}"
        expected_amount = float(callback_data_parts[4])
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞")
        return
    
    user_id = callback_query.from_user.id

    # Answer callback query first to remove loading state
    await callback_query.answer("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂...")

    print(f"Checking payment for label: {label}, expected amount: {expected_amount}")
    payment_successful = check_payment(label, expected_amount)

    if payment_successful:
        expiration_date = datetime.now() + timedelta(days=30)
        
        add_subscription(user_id, expiration_date.strftime("%Y-%m-%d"))
        
        await callback_query.message.edit_text(
            f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {expiration_date.strftime('%Y-%m-%d')}."
        )
    else:
        await callback_query.message.answer(
            "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        )

async def check_subscriptions_daily(bot):
    """Check and notify about expired subscriptions daily"""
    while True:
        try:
            current_time = datetime.now()
            expired_subscriptions = get_all_subscriptions()
            
            for user_id, expiration_date in expired_subscriptions:
                if isinstance(expiration_date, str):
                    expiration_date = datetime.fromisoformat(expiration_date.replace('Z', '+00:00'))
                
                if current_time >= expiration_date:
                    try:
                        await bot.send_message(
                            user_id, 
                            "‚ö†Ô∏è Your subscription has expired! Use /subscription to renew."
                        )
                        remove_expired_subscription(user_id)
                        logging.info(f"Notified user {user_id} about expired subscription")
                    except Exception as e:
                        logging.error(f"Failed to notify user {user_id}: {e}")
                        
        except Exception as e:
            logging.error(f"Error in subscription check: {e}")
        
        # Wait 24 hours
        await asyncio.sleep(24 * 60 * 60)

def start_subscription_checker(bot):
    """Start the subscription checker"""
    asyncio.create_task(check_subscriptions_daily(bot))
    logging.info("Subscription checker started")

async def handle_payment_options(callback_query: CallbackQuery):
    """Handle payment method selection"""
    callback_data_parts = callback_query.data.split('_')
    
    if len(callback_data_parts) >= 4:  # payment_options_{user_id}_{amount}
        user_id = callback_data_parts[2]
        amount = float(callback_data_parts[3])
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # Answer callback query first
    await callback_query.answer()
    
    # Create buttons for payment methods
    card_button = InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–æ–π (–ÆKassa)", callback_data=f"pay_card_{user_id}_{amount}")
    stars_button = InlineKeyboardButton(text="‚≠ê –ó–≤–µ–∑–¥–∞–º–∏ Telegram", callback_data=f"pay_stars_{user_id}_{amount}")
    back_button = InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_subscription")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[card_button], [stars_button], [back_button]])
    
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=keyboard
    )

async def handle_card_payment(callback_query: CallbackQuery):
    """Handle card payment via YooKassa"""
    callback_data_parts = callback_query.data.split('_')
    
    if len(callback_data_parts) >= 4:  # pay_card_{user_id}_{amount}
        user_id = int(callback_data_parts[2])
        amount = float(callback_data_parts[3])
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # Answer callback query first
    await callback_query.answer()
    
    # Create YooMoney payment
    payment_url, label = create_payment(user_id, amount)
    
    pay_button = InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π", url=payment_url)
    check_button = InlineKeyboardButton(text=f"‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª {amount} ‚ÇΩ", callback_data=f"check_payment_{label}_{amount}")
    back_button = InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"payment_options_{user_id}_{amount}")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[pay_button], [check_button], [back_button]])
    
    await callback_query.message.edit_text(
        f"–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π —á–µ—Ä–µ–∑ –ÆKassa\n\n–°—É–º–º–∞: {amount} ‚ÇΩ\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã, –∑–∞—Ç–µ–º –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª':",
        reply_markup=keyboard
    )

async def handle_stars_payment(callback_query: CallbackQuery):
    """Handle payment via Telegram Stars"""
    callback_data_parts = callback_query.data.split('_')
    
    if len(callback_data_parts) >= 4:  # pay_stars_{user_id}_{amount}
        user_id = int(callback_data_parts[2])
        amount = float(callback_data_parts[3])
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # Answer callback query first
    await callback_query.answer()
    
    # Calculate stars amount (1 star = 1 ruble approximately)
    stars_amount = int(amount)
    
    confirm_button = InlineKeyboardButton(text=f"‚≠ê –û–ø–ª–∞—Ç–∏—Ç—å {stars_amount} –∑–≤–µ–∑–¥", callback_data=f"confirm_stars_{user_id}_{stars_amount}")
    back_button = InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"payment_options_{user_id}_{amount}")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[confirm_button], [back_button]])
    
    await callback_query.message.edit_text(
        f"–û–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏ Telegram\n\n–°—É–º–º–∞: {stars_amount} ‚≠ê\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
        reply_markup=keyboard
    )

async def handle_back_to_subscription(callback_query: CallbackQuery):
    """Handle back to subscription menu"""
    await callback_query.answer()
    
    user_id = callback_query.from_user.id
    amount = 10
    
    pay_button = InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"payment_options_{user_id}_{amount}")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[pay_button]])
    
    await callback_query.message.edit_text(
        "–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

async def handle_stars_confirmation(callback_query: CallbackQuery):
    """Handle stars payment confirmation"""
    callback_data_parts = callback_query.data.split('_')
    
    if len(callback_data_parts) >= 4:  # confirm_stars_{user_id}_{stars_amount}
        user_id = int(callback_data_parts[2])
        stars_amount = int(callback_data_parts[3])
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # Answer callback query first
    await callback_query.answer()
    
    try:
        # Create invoice for Telegram Stars
        prices = [LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π", amount=stars_amount)]
        
        # Send invoice for stars payment
        await callback_query.bot.send_invoice(
            chat_id=callback_query.from_user.id,
            title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
            description="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞ –Ω–∞ 30 –¥–Ω–µ–π",
            payload=f"subscription_{user_id}_{stars_amount}",
            provider_token="",  # Empty for Telegram Stars
            currency="XTR",  # Telegram Stars currency
            prices=prices,
            start_parameter="subscription",
        )
        
        await callback_query.message.edit_text(
            "–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–≤–µ–∑–¥–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –µ–≥–æ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏."
        )
        
    except Exception as e:
        print(f"Error creating stars invoice: {e}")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã."
        )

async def handle_successful_stars_payment(pre_checkout_query):
    """Handle pre-checkout query for stars payment"""
    await pre_checkout_query.answer(ok=True)

async def handle_stars_payment_success(message: Message):
    """Handle successful stars payment"""
    if message.successful_payment:
        # Parse payload to get user info
        payload_parts = message.successful_payment.invoice_payload.split('_')
        
        if len(payload_parts) >= 3 and payload_parts[0] == "subscription":
            user_id = int(payload_parts[1])
            stars_amount = int(payload_parts[2])
            
            # Add subscription
            expiration_date = datetime.now() + timedelta(days=30)
            add_subscription(user_id, expiration_date.strftime("%Y-%m-%d"))
            
            await message.answer(
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {expiration_date.strftime('%Y-%m-%d')}."
            )
        else:
            await message.answer("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")
