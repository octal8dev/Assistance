package main

import (
	"encoding/json"
	"fmt"
	"log"

	"github.com/your-org/voltage/pkg/client"
	"github.com/your-org/voltage/internal/protocol"
)

// AI Assistant Message example
type AIMessage struct {
	ID       string `json:"id"`
	Role     string `json:"role"`     // "user" or "assistant"
	Content  string `json:"content"`
	Model    string `json:"model"`
	Tokens   int    `json:"tokens"`
}

func main() {
	fmt.Println("ü§ñ Voltage AI Assistant Demo")
	
	// Create secure clients for AI communication
	clientA, err := client.New(client.Config{
		EnableCompression: true,
	})
	if err != nil {
		log.Fatal("Failed to create client:", err)
	}
	defer clientA.Close()
	
	clientB, err := client.New(client.Config{
		EnableCompression: true,
	})
	if err != nil {
		log.Fatal("Failed to create assistant:", err)
	}
	defer clientB.Close()
	
	// Perform handshake
	handshake, _ := clientA.StartHandshake()
	response, _ := clientB.ProcessHandshake(handshake)
	clientA.CompleteHandshake(response)
	
	fmt.Println("üîê Secure channel established!")
	
	// Simulate AI conversation
	userMessage := AIMessage{
		ID:      "msg_001",
		Role:    "user",
		Content: "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ Voltage",
		Model:   "gpt-4",
		Tokens:  0,
	}
	
	// Serialize and encrypt user message
	userJSON, _ := json.Marshal(userMessage)
	encryptedUser, err := clientA.Encrypt(userJSON)
	if err != nil {
		log.Fatal("Failed to encrypt user message:", err)
	}
	
	fmt.Println("üì® User message encrypted and sent")
	
	// "Assistant" receives and decrypts
	decryptedUser, err := clientB.Decrypt(encryptedUser)
	if err != nil {
		log.Fatal("Failed to decrypt user message:", err)
	}
	
	var receivedMessage AIMessage
	json.Unmarshal(decryptedUser, &receivedMessage)
	
	fmt.Printf("üë§ User: %s\n", receivedMessage.Content)
	
	// Assistant response
	assistantMessage := AIMessage{
		ID:   "msg_002",
		Role: "assistant",
		Content: `Voltage Protocol - —ç—Ç–æ –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö MTProto, –Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:

üîë –ö–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
- ECDH P-256 –¥–ª—è –æ–±–º–µ–Ω–∞ –∫–ª—é—á–∞–º–∏
- AES-256-GCM –¥–ª—è —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
- HMAC-SHA256 –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
- –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö (zstd)

üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
- Perfect Forward Secrecy —á–µ—Ä–µ–∑ ECDH
- –ó–∞—â–∏—Ç–∞ –æ—Ç replay-–∞—Ç–∞–∫ —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
- –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ HMAC

‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:
- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
- –ë—ã—Å—Ç—Ä–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
- –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö

–ü—Ä–æ—Ç–æ–∫–æ–ª –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤, AI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏ —Ä–µ–∞–ª-—Ç–∞–π–º –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π.`,
		Model:  "voltage-ai",
		Tokens: 245,
	}
	
	// Encrypt assistant response
	assistantJSON, _ := json.Marshal(assistantMessage)
	encryptedAssistant, err := clientB.Encrypt(assistantJSON)
	if err != nil {
		log.Fatal("Failed to encrypt assistant message:", err)
	}
	
	// Client A receives response
	decryptedAssistant, err := clientA.Decrypt(encryptedAssistant)
	if err != nil {
		log.Fatal("Failed to decrypt assistant message:", err)
	}
	
	var assistantResponse AIMessage
	json.Unmarshal(decryptedAssistant, &assistantResponse)
	
	fmt.Printf("\nü§ñ Assistant: %s\n", assistantResponse.Content)
	fmt.Printf("\nüìä Tokens used: %d\n", assistantResponse.Tokens)
	
	fmt.Println("\n‚úÖ Secure AI conversation completed!")
}
