"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
"""
import asyncio
import logging
import time
from typing import Optional
from telegram import Update, Message, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from telegram.constants import ParseMode, ChatAction

from ..database import db_manager
from ..services import bot_gpt_service, human_behavior_service
from ..utils import rate_limiter, format_duration, split_long_message, complexity_analyzer
from config import config

logger = logging.getLogger(__name__)

class CommandHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞"""
    
    def __init__(self):
        self.gpt_service = bot_gpt_service
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        chat = update.effective_chat
        
        logger.info(f"[START] –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} ({user.username})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if user.id not in config.TELEGRAM_ADMIN_IDS:
            await update.message.reply_text(
                "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                parse_mode=ParseMode.MARKDOWN
            )
            logger.warning(f"[ACCESS_DENIED] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if db_manager:
            try:
                await db_manager.get_or_create_user(
                    telegram_id=user.id,
                    username=user.username,
                    first_name=user.first_name,
                    last_name=user.last_name,
                    is_admin=True
                )
                
                await db_manager.get_or_create_chat(
                    chat_id=chat.id,
                    chat_type=chat.type,
                    title=getattr(chat, 'title', None)
                )
                
                logger.info(f"[DB] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∏ —á–∞—Ç {chat.id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ë–î")
            except Exception as e:
                logger.error(f"[DB_ERROR] –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –ë–î: {e}")
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        welcome_text = f"""ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name or user.username}!*

–Ø –≤–∞—à AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:

_–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –∏—Å—Ç–æ—Ä–∏–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤._"""

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [
                InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="action_ask"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="action_status")
            ],
            [
                InlineKeyboardButton("üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="action_stats"),
                InlineKeyboardButton("üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="action_admin")
            ],
            [
                InlineKeyboardButton("ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã", callback_data="action_providers"),
                InlineKeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data="action_help")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            welcome_text,
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=reply_markup
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if user.id not in config.TELEGRAM_ADMIN_IDS:
            return
        
        help_text = """üîç *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞*

*üìù –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ `/ask [–≤–æ–ø—Ä–æ—Å]` - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
‚Ä¢ `/status` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ `/stats` - –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

*üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ `/admin` - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ `/reset [user_id]` - –°–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ `/providers` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö

*üí° –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥—ã /ask:*
```
/ask –ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?
/ask –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ Python –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª
/ask –û–±—ä—è—Å–Ω–∏ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É SQL –∏ NoSQL –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
/ask –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å REST API –Ω–∞ FastAPI?
```

*üñºÔ∏è –†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:*
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π `/ask` –∏ —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

*‚ö° –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º {config.MAX_REQUESTS_PER_MINUTE} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {config.MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤

_–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤._""".format(config=config)

        await update.message.reply_text(
            help_text,
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True
        )
        
        logger.info(f"[HELP] –ü–æ–∫–∞–∑–∞–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
    
    async def ask_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ask - —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ —Å —ç–º—É–ª—è—Ü–∏–µ–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
        user = update.effective_user
        chat = update.effective_chat
        message = update.message
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if user.id not in config.TELEGRAM_ADMIN_IDS:
            await message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
        is_allowed, error_msg = rate_limiter.is_allowed(
            user.id, 
            max_requests=config.MAX_REQUESTS_PER_MINUTE,
            time_window=60
        )
        
        if not is_allowed:
            await message.reply_text(f"‚è±Ô∏è {error_msg}")
            logger.warning(f"[RATE_LIMIT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç: {error_msg}")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        question_text = ""
        if context.args:
            question_text = " ".join(context.args)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_data = None
        if message.photo:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                photo = message.photo[-1]
                file = await context.bot.get_file(photo.file_id)
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                import io
                import base64
                
                image_bytes = io.BytesIO()
                await file.download_to_memory(image_bytes)
                image_bytes.seek(0)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
                image_base64 = base64.b64encode(image_bytes.getvalue()).decode('utf-8')
                image_data = f"data:image/jpeg;base64,{image_base64}"
                
                logger.info(f"[IMAGE] –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                
                if not question_text:
                    question_text = "–û–ø–∏—à–∏ —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ"
                    
            except Exception as e:
                logger.error(f"[IMAGE_ERROR] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                await message.reply_text("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
        
        if not question_text:
            await message.reply_text(
                "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n\n"
                "*–ü—Ä–∏–º–µ—Ä:* `/ask –ß—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?`",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
        await context.bot.send_chat_action(chat_id=chat.id, action=ChatAction.TYPING)
        
        # –≠–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /ask
        try:
            await human_behavior_service.mark_as_read(chat.id)
        except Exception as e:
            logger.debug(f"[HUMAN_BEHAVIOR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ: {e}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        human_delay = await human_behavior_service.simulate_human_delay(question_text)
        logger.info(f"ü§ñ –≠–º—É–ª–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /ask - –∑–∞–¥–µ—Ä–∂–∫–∞ {human_delay/60:.1f} –º–∏–Ω—É—Ç")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–µ–≥–∞ —á–µ–ª–æ–≤–µ–∫–∞  
        complexity_analysis = complexity_analyzer.analyze_complexity(question_text)
        should_tag_human = complexity_analysis["should_tag_human"]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        saved_message = None
        if db_manager:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                await db_manager.get_or_create_user(
                    telegram_id=user.id,
                    username=user.username,
                    first_name=user.first_name,
                    last_name=user.last_name,
                    is_admin=True
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                saved_message = await db_manager.save_message(
                    telegram_message_id=message.message_id,
                    chat_id=chat.id,
                    user_id=user.id,
                    message_text=question_text,
                    message_type='photo' if image_data else 'text',
                    is_command=True,
                    command_name='ask',
                    has_image=bool(image_data)
                )
                
                logger.info(f"[DB] –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {saved_message.id}")
            except Exception as e:
                logger.error(f"[DB_ERROR] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        logger.info(f"[ASK] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: '{question_text[:100]}...'")
        if image_data:
            logger.info(f"[ASK] –ö –≤–æ–ø—Ä–æ—Å—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await asyncio.sleep(human_delay)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
            import time
            start_time = time.time()
            
            response_data = await self.gpt_service.get_response_async(
                message=question_text,
                image_data=image_data,
                chat_id=chat.id,
                model="auto"
            )
            
            end_time = time.time()
            response_time_ms = int((end_time - start_time) * 1000)
            
            if response_data["success"]:
                response_text = response_data["response"]
                provider_used = response_data.get("provider_used", "unknown")
                model_used = response_data.get("model_used", "unknown")
                
                # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å–ª–æ–∂–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if should_tag_human and config.HUMAN_TAG_USER_ID:
                    try:
                        human_user = await context.bot.get_chat(config.HUMAN_TAG_USER_ID)
                        human_mention = f"@{human_user.username}" if human_user.username else f"[–ß–µ–ª–æ–≤–µ–∫](tg://user?id={config.HUMAN_TAG_USER_ID})"
                        response_text = f"üß† *–°–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞* {human_mention}\n\n{response_text}"
                    except Exception as e:
                        logger.error(f"[TAG_ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ–≥–µ —á–µ–ª–æ–≤–µ–∫–∞: {e}")
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–∏
                message_parts = split_long_message(response_text, max_length=4000)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å —ç–º—É–ª—è—Ü–∏–µ–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telethon
                for i, part in enumerate(message_parts):
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Telethon –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
                        if human_behavior_service.is_initialized:
                            await human_behavior_service.send_message_with_human_behavior(
                                chat_id=chat.id,
                                message=part
                            )
                        else:
                            # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π Bot API
                            await message.reply_text(
                                part,
                                parse_mode=ParseMode.MARKDOWN,
                                disable_web_page_preview=True
                            )
                    except Exception as send_error:
                        logger.error(f"[SEND_ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telethon, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {send_error}")
                        # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π telegram API
                        await message.reply_text(
                            part,
                            parse_mode=ParseMode.MARKDOWN,
                            disable_web_page_preview=True
                        )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
                if db_manager and saved_message:
                    try:
                        await db_manager.update_message_response(
                            message_id=saved_message.id,
                            gpt_response=response_text,
                            model_used=model_used,
                            provider_used=provider_used,
                            response_time=response_time_ms
                        )
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
                        await db_manager.log_request(
                            user_id=user.id,
                            chat_id=chat.id,
                            request_type='ask',
                            input_length=len(question_text),
                            output_length=len(response_text),
                            response_time=response_time_ms,
                            success=True,
                            provider_used=provider_used,
                            model_used=model_used
                        )
                    except Exception as e:
                        logger.error(f"[DB_ERROR] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ –ë–î: {e}")
                
                logger.info(f"[SUCCESS] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}. –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_used}, –≤—Ä–µ–º—è: {format_duration(response_time_ms/1000)}")
                
            else:
                # –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
                error_text = response_data.get("response", "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI.")
                await message.reply_text(error_text)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                if db_manager:
                    try:
                        await db_manager.log_request(
                            user_id=user.id,
                            chat_id=chat.id,
                            request_type='ask',
                            input_length=len(question_text),
                            response_time=response_time_ms,
                            success=False,
                            error_message=response_data.get("error", "Unknown error")
                        )
                    except Exception as e:
                        logger.error(f"[DB_ERROR] –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                
                logger.warning(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {response_data.get('error')}")
        
        except Exception as e:
            logger.error(f"[CRITICAL_ERROR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /ask: {e}")
            await message.reply_text(
                "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
            if db_manager:
                try:
                    await db_manager.log_request(
                        user_id=user.id,
                        chat_id=chat.id,
                        request_type='ask',
                        input_length=len(question_text),
                        success=False,
                        error_message=str(e)
                    )
                except Exception as db_e:
                    logger.error(f"[DB_ERROR] –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏: {db_e}")
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if user.id not in config.TELEGRAM_ADMIN_IDS:
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö
            provider_info = self.gpt_service.get_provider_info()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_stats = rate_limiter.get_user_stats(user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
            db_stats = None
            if db_manager:
                try:
                    db_stats = await db_manager.get_system_stats()
                except Exception as e:
                    logger.error(f"[DB_ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î: {e}")
            
            status_text = f"""üìä *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã*

*ü§ñ AI –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã:*
‚Ä¢ –¢–µ–∫—É—â–∏–π: `{provider_info['current']}`
‚Ä¢ –†–∞–±–æ—á–∏—Ö: {provider_info['working_providers']}
‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω—ã—Ö: {provider_info['backup_providers']}
‚Ä¢ Vision: {provider_info['vision_providers']}

*‚ö° –í–∞—à–∏ –ª–∏–º–∏—Ç—ã:*
‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –º–∏–Ω—É—Ç—É: {user_stats['requests_in_window']}/{user_stats['max_requests']}
‚Ä¢ –ú–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å: {'‚úÖ –î–∞' if user_stats['can_request_now'] else '‚ùå –ù–µ—Ç'}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å: {format_duration(user_stats['last_request_ago']) + ' –Ω–∞–∑–∞–¥' if user_stats['last_request_ago'] else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}"""

            if db_stats:
                status_text += f"""

*üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:*
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {db_stats['total_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö (7 –¥–Ω–µ–π): {db_stats['active_users']}
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {db_stats['total_messages']}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {db_stats['today_messages']}"""

            status_text += f"""

*‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:*
‚Ä¢ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: {config.MAX_REQUESTS_PER_MINUTE}/–º–∏–Ω
‚Ä¢ –ú–∞–∫—Å. –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {config.MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞' if db_manager else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}

_–û–±–Ω–æ–≤–ª–µ–Ω–æ: {time.strftime('%H:%M:%S')}_"""

            await update.message.reply_text(
                status_text,
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True
            )
            
            logger.info(f"[STATUS] –°—Ç–∞—Ç—É—Å –ø–æ–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
            
        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await update.message.reply_text("üö´ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã.")
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if user.id not in config.TELEGRAM_ADMIN_IDS:
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ rate limiter
            rate_stats = rate_limiter.get_user_stats(user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
            db_stats = None
            if db_manager:
                try:
                    db_stats = await db_manager.get_user_stats(user.id)
                except Exception as e:
                    logger.error(f"[DB_ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            
            stats_text = f"""üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

*üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user.first_name or user.username} (`{user.id}`)

*‚ö° –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è:*
‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –º–∏–Ω—É—Ç—É: {rate_stats['requests_in_window']}/{rate_stats['max_requests']}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –ú–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å' if rate_stats['can_request_now'] else 'üî¥ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ'}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å: {format_duration(rate_stats['last_request_ago']) + ' –Ω–∞–∑–∞–¥' if rate_stats['last_request_ago'] else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}"""

            if db_stats:
                stats_text += f"""

*üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {db_stats['total_messages']}
‚Ä¢ –ö–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {db_stats['command_count']}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {db_stats['last_activity'].strftime('%d.%m.%Y %H:%M') if db_stats['last_activity'] else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}"""

            stats_text += f"""

*üîß –í–∞—à–∏ –ø—Ä–∞–≤–∞:*
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ‚úÖ –î–∞
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É: ‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ /admin: ‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω

_–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {time.strftime('%H:%M:%S')}_"""

            await update.message.reply_text(
                stats_text,
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True
            )
            
            logger.info(f"[STATS] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
            
        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await update.message.reply_text("üö´ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    
    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin - –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if user.id not in config.TELEGRAM_ADMIN_IDS:
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö
            provider_info = self.gpt_service.get_provider_info()
            provider_stats = provider_info.get('provider_stats', {})
            
            # –¢–æ–ø-3 –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
            top_providers = sorted(provider_stats.items(), key=lambda x: x[1], reverse=True)[:3]
            
            admin_text = f"""üîß *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*

*ü§ñ AI –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã:*
‚Ä¢ –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π: `{provider_info['current']}`
‚Ä¢ –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {len(provider_info['all'])}
‚Ä¢ –†–∞–±–æ—á–∏—Ö: {provider_info['working_providers']}
‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω—ã—Ö: {provider_info['backup_providers']}
‚Ä¢ Vision: {provider_info['vision_providers']}

*üìä –¢–æ–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:*"""

            for i, (provider, count) in enumerate(top_providers, 1):
                admin_text += f"\n{i}. `{provider}` - {count} –∑–∞–ø—Ä–æ—Å–æ–≤"
            
            if not top_providers:
                admin_text += "\n_–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ —Å–æ–±—Ä–∞–Ω–∞_"

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
            if db_manager:
                try:
                    system_stats = await db_manager.get_system_stats()
                    admin_text += f"""

*üìà –°–∏—Å—Ç–µ–º–∞:*
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {system_stats['total_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö (7 –¥–Ω–µ–π): {system_stats['active_users']}
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {system_stats['total_messages']}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {system_stats['today_messages']}"""
                except Exception as e:
                    logger.error(f"[DB_ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                    admin_text += "\n\n*üìà –°–∏—Å—Ç–µ–º–∞:* ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"

            admin_text += f"""

*‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:*
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(config.TELEGRAM_ADMIN_IDS)}
‚Ä¢ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: {config.MAX_REQUESTS_PER_MINUTE}/–º–∏–Ω
‚Ä¢ –ú–∞–∫—Å. –¥–ª–∏–Ω–∞: {config.MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤

*üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ `/reset [user_id]` - –°–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ `/providers` - –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö

_–ü–∞–Ω–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {time.strftime('%H:%M:%S')}_"""

            await update.message.reply_text(
                admin_text,
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True
            )
            
            logger.info(f"[ADMIN] –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
            
        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            await update.message.reply_text("üö´ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    async def reset_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset - —Å–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if user.id not in config.TELEGRAM_ADMIN_IDS:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        if not context.args:
            await update.message.reply_text(
                "‚ùì –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n*–ü—Ä–∏–º–µ—Ä:* `/reset 123456789`",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        try:
            target_user_id = int(context.args[0])
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç—ã
            rate_limiter.reset_user(target_user_id)
            
            await update.message.reply_text(
                f"‚úÖ –õ–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{target_user_id}` —Å–±—Ä–æ—à–µ–Ω—ã.",
                parse_mode=ParseMode.MARKDOWN
            )
            
            logger.info(f"[RESET] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user.id} —Å–±—Ä–æ—Å–∏–ª –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}")
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤: {e}")
            await update.message.reply_text("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ª–∏–º–∏—Ç–æ–≤.")
    
    async def providers_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /providers - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö"""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if user.id not in config.TELEGRAM_ADMIN_IDS:
            return
        
        try:
            provider_info = self.gpt_service.get_provider_info()
            
            providers_text = f"""ü§ñ *–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö*

*üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: `{provider_info['current']}`
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {len(provider_info['all'])}
‚Ä¢ –†–∞–±–æ—á–∏—Ö: {provider_info['working_providers']}
‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω—ã—Ö: {provider_info['backup_providers']}
‚Ä¢ Vision: {provider_info['vision_providers']}

*‚ö° –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã (–¥–æ 3—Å):*"""
            
            for provider in self.gpt_service.fast_providers:
                status = "üü¢" if provider == provider_info['current'] else "‚ö™"
                usage = provider_info['provider_stats'].get(provider, 0)
                providers_text += f"\n{status} `{provider}` - {usage} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π"
            
            providers_text += "\n\n*üî∂ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã (3-6—Å):*"
            for provider in self.gpt_service.medium_providers:
                status = "üü¢" if provider == provider_info['current'] else "‚ö™"
                usage = provider_info['provider_stats'].get(provider, 0)
                providers_text += f"\n{status} `{provider}` - {usage} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π"
            
            providers_text += "\n\n*üü† –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã (6—Å+):*"
            for provider in self.gpt_service.slow_providers:
                status = "üü¢" if provider == provider_info['current'] else "‚ö™"
                usage = provider_info['provider_stats'].get(provider, 0)
                providers_text += f"\n{status} `{provider}` - {usage} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π"
            
            providers_text += "\n\n*üëÅÔ∏è Vision –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:*"
            for provider in self.gpt_service.vision_providers:
                status = "üü¢" if provider == provider_info['current'] else "‚ö™"
                usage = provider_info['provider_stats'].get(provider, 0)
                providers_text += f"\n{status} `{provider}` - {usage} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π"
            
            providers_text += f"\n\n_–û–±–Ω–æ–≤–ª–µ–Ω–æ: {time.strftime('%H:%M:%S')}_"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            message_parts = split_long_message(providers_text, max_length=4000)
            
            for part in message_parts:
                await update.message.reply_text(
                    part,
                    parse_mode=ParseMode.MARKDOWN,
                    disable_web_page_preview=True
                )
            
            logger.info(f"[PROVIDERS] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö –ø–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
            
        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö: {e}")
            await update.message.reply_text("üö´ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö.")
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        user = query.from_user
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        await query.answer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if user.id not in config.TELEGRAM_ADMIN_IDS:
            await query.edit_message_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        action = query.data
        
        if action == "action_ask":
            # –†–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="action_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            instruction_text = """‚ùì *–†–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω*

üñäÔ∏è **–ö–∞–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å:**
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é-–≤–æ–ø—Ä–æ—Å–æ–º
‚Ä¢ –Ø –æ—Ç–≤–µ—á—É –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!

üí° **–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?"
‚Ä¢ "–ù–∞–ø–∏—à–∏ –∫–æ–¥ –Ω–∞ Python"
‚Ä¢ [–§–æ—Ç–æ] "–ß—Ç–æ –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏?"

_–û–∂–∏–¥–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å..._"""
            
            await query.edit_message_text(
                instruction_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
            context.user_data['waiting_for_question'] = True
            
        elif action == "action_status":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            await self._show_status_inline(query, context)
            
        elif action == "action_stats":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self._show_stats_inline(query, context)
            
        elif action == "action_admin":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
            await self._show_admin_inline(query, context)
            
        elif action == "action_providers":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
            await self._show_providers_inline(query, context)
            
        elif action == "action_help":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
            await self._show_help_inline(query, context)
            
        elif action == "action_menu":
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await self._show_main_menu(query, context)
    
    async def _show_main_menu(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user = query.from_user
        
        menu_text = f"""ü§ñ *AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç*

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name or user.username}!
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""

        keyboard = [
            [
                InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="action_ask"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="action_status")
            ],
            [
                InlineKeyboardButton("üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="action_stats"),
                InlineKeyboardButton("üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="action_admin")
            ],
            [
                InlineKeyboardButton("ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã", callback_data="action_providers"),
                InlineKeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data="action_help")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            menu_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    async def _show_status_inline(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤ –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ"""
        try:
            provider_info = self.gpt_service.get_provider_info()
            user_stats = rate_limiter.get_user_stats(query.from_user.id)
            
            status_text = f"""üìä *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã*

*ü§ñ AI –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã:*
‚Ä¢ –¢–µ–∫—É—â–∏–π: `{provider_info['current']}`
‚Ä¢ –†–∞–±–æ—á–∏—Ö: {provider_info['working_providers']}
‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω—ã—Ö: {provider_info['backup_providers']}
‚Ä¢ Vision: {provider_info['vision_providers']}

*‚ö° –í–∞—à–∏ –ª–∏–º–∏—Ç—ã:*
‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –º–∏–Ω—É—Ç—É: {user_stats['requests_in_window']}/{user_stats['max_requests']}
‚Ä¢ –ú–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å: {'‚úÖ –î–∞' if user_stats['can_request_now'] else '‚ùå –ù–µ—Ç'}

*‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:*
‚Ä¢ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: {config.MAX_REQUESTS_PER_MINUTE}/–º–∏–Ω
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞' if db_manager else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}"""

            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="action_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                status_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await query.edit_message_text("üö´ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.")
    
    async def _show_stats_inline(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ"""
        try:
            user = query.from_user
            rate_stats = rate_limiter.get_user_stats(user.id)
            
            db_stats = None
            if db_manager:
                try:
                    db_stats = await db_manager.get_user_stats(user.id)
                except Exception as e:
                    logger.error(f"[DB_ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            
            stats_text = f"""üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

*üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user.first_name or user.username}

*‚ö° –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è:*
‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –º–∏–Ω—É—Ç—É: {rate_stats['requests_in_window']}/{rate_stats['max_requests']}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –ú–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å' if rate_stats['can_request_now'] else 'üî¥ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ'}"""

            if db_stats:
                stats_text += f"""

*üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {db_stats['total_messages']}
‚Ä¢ –ö–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {db_stats['command_count']}"""

            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="action_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                stats_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await query.edit_message_text("üö´ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    
    async def _show_admin_inline(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –≤ –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ"""
        try:
            provider_info = self.gpt_service.get_provider_info()
            provider_stats = provider_info.get('provider_stats', {})
            
            top_providers = sorted(provider_stats.items(), key=lambda x: x[1], reverse=True)[:2]
            
            admin_text = f"""üîß *–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å*

*ü§ñ AI –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã:*
‚Ä¢ –¢–µ–∫—É—â–∏–π: `{provider_info['current']}`
‚Ä¢ –í—Å–µ–≥–æ: {len(provider_info['all'])}
‚Ä¢ –†–∞–±–æ—á–∏—Ö: {provider_info['working_providers']}"""

            if top_providers:
                admin_text += "\n\n*üìä –¢–æ–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:*"
                for i, (provider, count) in enumerate(top_providers, 1):
                    admin_text += f"\n{i}. `{provider}` - {count}"

            if db_manager:
                try:
                    system_stats = await db_manager.get_system_stats()
                    admin_text += f"""

*üìà –°–∏—Å—Ç–µ–º–∞:*
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {system_stats['total_users']}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {system_stats['total_messages']}"""
                except Exception:
                    pass

            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="action_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                admin_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: {e}")
            await query.edit_message_text("üö´ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
    
    async def _show_providers_inline(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –≤ –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ"""
        try:
            provider_info = self.gpt_service.get_provider_info()
            
            providers_text = f"""ü§ñ *AI –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã*

*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –¢–µ–∫—É—â–∏–π: `{provider_info['current']}`
‚Ä¢ –í—Å–µ–≥–æ: {len(provider_info['all'])}
‚Ä¢ –†–∞–±–æ—á–∏—Ö: {provider_info['working_providers']}
‚Ä¢ Vision: {provider_info['vision_providers']}

*‚ö° –ë—ã—Å—Ç—Ä—ã–µ:* {len(self.gpt_service.fast_providers)}
*üî∂ –°—Ä–µ–¥–Ω–∏–µ:* {len(self.gpt_service.medium_providers)}
*üü† –ú–µ–¥–ª–µ–Ω–Ω—ã–µ:* {len(self.gpt_service.slow_providers)}"""

            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="action_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                providers_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {e}")
            await query.edit_message_text("üö´ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
    
    async def _show_help_inline(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –≤ –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ"""
        help_text = """‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –ø–æ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É*

*üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –ü–æ–º–æ—â—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º
‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º

*üñºÔ∏è –†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:*
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –≤–æ–ø—Ä–æ—Å–æ–º –≤ –ø–æ–¥–ø–∏—Å–∏

*‚ö° –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*
‚Ä¢ {config.MAX_REQUESTS_PER_MINUTE} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è

*üîß –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*
–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞""".format(config=config)

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="action_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            help_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –∫–æ–º–∞–Ω–¥)"""
        user = update.effective_user
        chat = update.effective_chat
        message = update.message
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if user.id not in config.TELEGRAM_ADMIN_IDS:
            return
        
        # –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É –Ω–∞ –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if chat.type == 'private':
            waiting_for_question = context.user_data.get('waiting_for_question', False)
            
            if waiting_for_question:
                # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–º—É–ª—è—Ü–∏—é —á–µ–ª–æ–≤–µ–∫–∞
                await self._process_ai_question(update, context, use_human_behavior=True)
                context.user_data['waiting_for_question'] = False
            else:
                # –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - —Ç–æ–∂–µ —Å —ç–º—É–ª—è—Ü–∏–µ–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
                await self._process_simple_message(update, context)
        else:
            # –í –≥—Ä—É–ø–ø–∞—Ö —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = [
                [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="action_ask")],
                [InlineKeyboardButton("üìä –ú–µ–Ω—é", callback_data="action_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await message.reply_text(
                "üí° –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:",
                reply_markup=reply_markup
            )
    
    async def _process_simple_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç–º—É–ª—è—Ü–∏–µ–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
        user = update.effective_user
        chat = update.effective_chat
        message = update.message
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
        is_allowed, error_msg = rate_limiter.is_allowed(
            user.id, 
            max_requests=config.MAX_REQUESTS_PER_MINUTE,
            time_window=60
        )
        
        if not is_allowed:
            await message.reply_text(f"‚è±Ô∏è {error_msg}")
            logger.warning(f"[RATE_LIMIT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç: {error_msg}")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        question_text = message.text or ""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞
        complexity_analysis = complexity_analyzer.analyze_complexity(question_text)
        should_tag_human = complexity_analysis["should_tag_human"]
        
        logger.info(f"[SIMPLE_MSG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}: '{question_text[:50]}...' (—Å–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity_analysis['complexity_level']})")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
        await context.bot.send_chat_action(chat_id=chat.id, action=ChatAction.TYPING)
        
        # –≠–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            await human_behavior_service.mark_as_read(chat.id)
        except Exception as e:
            logger.debug(f"[HUMAN_BEHAVIOR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ: {e}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        human_delay = await human_behavior_service.simulate_human_delay(question_text)
        logger.info(f"ü§ñ –≠–º—É–ª–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è - –∑–∞–¥–µ—Ä–∂–∫–∞ {human_delay/60:.1f} –º–∏–Ω—É—Ç")
        
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await asyncio.sleep(human_delay)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
            import time
            start_time = time.time()
            
            response_data = await self.gpt_service.get_response_async(
                message=question_text,
                image_data=None,
                chat_id=chat.id,
                model="auto"
            )
            
            end_time = time.time()
            response_time_ms = int((end_time - start_time) * 1000)
            
            if response_data["success"]:
                response_text = response_data["response"]
                provider_used = response_data.get("provider_used", "unknown")
                model_used = response_data.get("model_used", "unknown")
                
                # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å–ª–æ–∂–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if should_tag_human and config.HUMAN_TAG_USER_ID:
                    try:
                        human_user = await context.bot.get_chat(config.HUMAN_TAG_USER_ID)
                        human_mention = f"@{human_user.username}" if human_user.username else f"[–ß–µ–ª–æ–≤–µ–∫](tg://user?id={config.HUMAN_TAG_USER_ID})"
                        response_text = f"üß† *–°–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞* {human_mention}\n\n{response_text}"
                    except Exception as e:
                        logger.error(f"[TAG_ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ–≥–µ —á–µ–ª–æ–≤–µ–∫–∞: {e}")
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–∏
                message_parts = split_long_message(response_text, max_length=4000)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å —ç–º—É–ª—è—Ü–∏–µ–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telethon
                for i, part in enumerate(message_parts):
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Telethon –¥–ª—è –±–æ–ª–µ–µ —á–µ–ª–æ–≤–µ—á–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
                        if human_behavior_service.is_initialized and chat.type == 'private':
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telethon —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º
                            await human_behavior_service.send_message_with_human_behavior(
                                chat_id=chat.id,
                                message=part
                            )
                        else:
                            # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π API
                            await message.reply_text(
                                part,
                                parse_mode=ParseMode.MARKDOWN,
                                disable_web_page_preview=True
                            )
                    except Exception as send_error:
                        logger.error(f"[SEND_ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telethon, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {send_error}")
                        # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π telegram API
                        await message.reply_text(
                            part,
                            parse_mode=ParseMode.MARKDOWN,
                            disable_web_page_preview=True
                        )
                
                logger.info(f"[SIMPLE_SUCCESS] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}. –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_used}, —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity_analysis['complexity_level']}")
                
            else:
                # –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
                error_text = response_data.get("response", "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI.")
                await message.reply_text(error_text)
                logger.warning(f"[SIMPLE_ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {response_data.get('error')}")
        
        except Exception as e:
            logger.error(f"[SIMPLE_CRITICAL] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await message.reply_text("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _process_ai_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE, use_human_behavior: bool = False):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫ AI (–≤—ã–Ω–µ—Å–µ–Ω–æ –∏–∑ ask_command)"""
        user = update.effective_user
        chat = update.effective_chat
        message = update.message
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
        is_allowed, error_msg = rate_limiter.is_allowed(
            user.id, 
            max_requests=config.MAX_REQUESTS_PER_MINUTE,
            time_window=60
        )
        
        if not is_allowed:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="action_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await message.reply_text(
                f"‚è±Ô∏è {error_msg}",
                reply_markup=reply_markup
            )
            logger.warning(f"[RATE_LIMIT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç: {error_msg}")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        question_text = message.text or ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_data = None
        if message.photo:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                photo = message.photo[-1]
                file = await context.bot.get_file(photo.file_id)
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                import io
                import base64
                
                image_bytes = io.BytesIO()
                await file.download_to_memory(image_bytes)
                image_bytes.seek(0)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
                image_base64 = base64.b64encode(image_bytes.getvalue()).decode('utf-8')
                image_data = f"data:image/jpeg;base64,{image_base64}"
                
                logger.info(f"[IMAGE] –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                
                if not question_text:
                    question_text = "–û–ø–∏—à–∏ —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ"
                    
            except Exception as e:
                logger.error(f"[IMAGE_ERROR] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                await message.reply_text("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
        
        if not question_text:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="action_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await message.reply_text(
                "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é.",
                reply_markup=reply_markup
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
        await context.bot.send_chat_action(chat_id=chat.id, action=ChatAction.TYPING)
        
        # –≠–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        human_delay = 0
        if use_human_behavior:
            # –≠–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è - –æ—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
            try:
                await human_behavior_service.mark_as_read(chat.id)
            except Exception as e:
                logger.debug(f"[HUMAN_BEHAVIOR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ: {e}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            human_delay = await human_behavior_service.simulate_human_delay(question_text)
            logger.info(f"ü§ñ –≠–º—É–ª–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - –∑–∞–¥–µ—Ä–∂–∫–∞ {human_delay/60:.1f} –º–∏–Ω—É—Ç")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–µ–≥–∞ —á–µ–ª–æ–≤–µ–∫–∞
        complexity_analysis = complexity_analyzer.analyze_complexity(question_text)
        should_tag_human = complexity_analysis["should_tag_human"]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        saved_message = None
        if db_manager:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                await db_manager.get_or_create_user(
                    telegram_id=user.id,
                    username=user.username,
                    first_name=user.first_name,
                    last_name=user.last_name,
                    is_admin=True
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                saved_message = await db_manager.save_message(
                    telegram_message_id=message.message_id,
                    chat_id=chat.id,
                    user_id=user.id,
                    message_text=question_text,
                    message_type='photo' if image_data else 'text',
                    is_command=False,  # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –∫–æ–º–∞–Ω–¥–∞
                    command_name='ask_button',
                    has_image=bool(image_data)
                )
                
                logger.info(f"[DB] –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {saved_message.id}")
            except Exception as e:
                logger.error(f"[DB_ERROR] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        logger.info(f"[ASK_BUTTON] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: '{question_text[:100]}...'")
        if image_data:
            logger.info(f"[ASK_BUTTON] –ö –≤–æ–ø—Ä–æ—Å—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if use_human_behavior and human_delay > 0:
                await asyncio.sleep(human_delay)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
            import time
            start_time = time.time()
            
            response_data = await self.gpt_service.get_response_async(
                message=question_text,
                image_data=image_data,
                chat_id=chat.id,
                model="auto"
            )
            
            end_time = time.time()
            response_time_ms = int((end_time - start_time) * 1000)
            
            if response_data["success"]:
                response_text = response_data["response"]
                provider_used = response_data.get("provider_used", "unknown")
                model_used = response_data.get("model_used", "unknown")
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–∏
                message_parts = split_long_message(response_text, max_length=4000)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å —ç–º—É–ª—è—Ü–∏–µ–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
                for i, part in enumerate(message_parts):
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Telethon –¥–ª—è –±–æ–ª–µ–µ —á–µ–ª–æ–≤–µ—á–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
                        if human_behavior_service.is_initialized and chat.type == 'private':
                            if i == len(message_parts) - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å
                                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π API
                                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="action_menu")]]
                                reply_markup = InlineKeyboardMarkup(keyboard)
                                
                                await message.reply_text(
                                    part,
                                    parse_mode=ParseMode.MARKDOWN,
                                    disable_web_page_preview=True,
                                    reply_markup=reply_markup
                                )
                            else:
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telethon —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º
                                await human_behavior_service.send_message_with_human_behavior(
                                    chat_id=chat.id,
                                    message=part
                                )
                        else:
                            # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π API
                            if i == len(message_parts) - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
                                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="action_menu")]]
                                reply_markup = InlineKeyboardMarkup(keyboard)
                                
                                await message.reply_text(
                                    part,
                                    parse_mode=ParseMode.MARKDOWN,
                                    disable_web_page_preview=True,
                                    reply_markup=reply_markup
                                )
                            else:
                                await message.reply_text(
                                    part,
                                    parse_mode=ParseMode.MARKDOWN,
                                    disable_web_page_preview=True
                                )
                    except Exception as send_error:
                        logger.error(f"[SEND_ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telethon, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {send_error}")
                        # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π telegram API
                        if i == len(message_parts) - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
                            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="action_menu")]]
                            reply_markup = InlineKeyboardMarkup(keyboard)
                            
                            await message.reply_text(
                                part,
                                parse_mode=ParseMode.MARKDOWN,
                                disable_web_page_preview=True,
                                reply_markup=reply_markup
                            )
                        else:
                            await message.reply_text(
                                part,
                                parse_mode=ParseMode.MARKDOWN,
                                disable_web_page_preview=True
                            )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
                if db_manager and saved_message:
                    try:
                        await db_manager.update_message_response(
                            message_id=saved_message.id,
                            gpt_response=response_text,
                            model_used=model_used,
                            provider_used=provider_used,
                            response_time=response_time_ms
                        )
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
                        await db_manager.log_request(
                            user_id=user.id,
                            chat_id=chat.id,
                            request_type='ask_button',
                            input_length=len(question_text),
                            output_length=len(response_text),
                            response_time=response_time_ms,
                            success=True,
                            provider_used=provider_used,
                            model_used=model_used
                        )
                    except Exception as e:
                        logger.error(f"[DB_ERROR] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ –ë–î: {e}")
                
                logger.info(f"[SUCCESS] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}. –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_used}, –≤—Ä–µ–º—è: {format_duration(response_time_ms/1000)}")
                
            else:
                # –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
                error_text = response_data.get("response", "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI.")
                
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="action_menu")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await message.reply_text(error_text, reply_markup=reply_markup)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                if db_manager:
                    try:
                        await db_manager.log_request(
                            user_id=user.id,
                            chat_id=chat.id,
                            request_type='ask_button',
                            input_length=len(question_text),
                            response_time=response_time_ms,
                            success=False,
                            error_message=response_data.get("error", "Unknown error")
                        )
                    except Exception as e:
                        logger.error(f"[DB_ERROR] –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                
                logger.warning(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {response_data.get('error')}")
        
        except Exception as e:
            logger.error(f"[CRITICAL_ERROR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="action_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await message.reply_text(
                "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=reply_markup
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
            if db_manager:
                try:
                    await db_manager.log_request(
                        user_id=user.id,
                        chat_id=chat.id,
                        request_type='ask_button',
                        input_length=len(question_text),
                        success=False,
                        error_message=str(e)
                    )
                except Exception as db_e:
                    logger.error(f"[DB_ERROR] –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏: {db_e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
command_handlers = CommandHandlers()
