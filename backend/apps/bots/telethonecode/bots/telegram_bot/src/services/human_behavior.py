"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Telethon
"""
import asyncio
import logging
import random
from typing import Optional, Union
from telethon import TelegramClient, errors
from telethon.tl.types import User
from config import config

logger = logging.getLogger(__name__)

class HumanBehaviorService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
    
    def __init__(self):
        self.client: Optional[TelegramClient] = None
        self.is_initialized = False
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –±–æ—Ç–∞)"""
        try:
            if config.TELETHON_API_ID == 0 or not config.TELETHON_API_HASH:
                logger.warning("ü§ñ Telethon –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ —ç–º—É–ª—è—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è")
                return False

            if not config.TELETHON_PHONE_NUMBER:
                logger.error("‚ùå TELETHON_PHONE_NUMBER –Ω–µ –∑–∞–¥–∞–Ω!")
                return False

            self.client = TelegramClient(
                config.TELETHON_SESSION_STRING,
                config.TELETHON_API_ID,
                config.TELETHON_API_HASH
            )

            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info(f"üì± –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telethon —á–µ—Ä–µ–∑ –∞–∫–∫–∞—É–Ω—Ç: {config.TELETHON_PHONE_NUMBER}")
            print("\n" + "="*60)
            print("üì± –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELETHON")
            print("="*60)
            print(f"üìû –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {config.TELETHON_PHONE_NUMBER}")
            print("üì± –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –∏–∑ Telegram")
            print("="*60)
            
            await self.client.start(
                phone=config.TELETHON_PHONE_NUMBER,
                code_callback=self._code_callback,
                password=self._password_callback
            )
            
            self.is_initialized = True
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            me = await self.client.get_me()
            logger.info(f"üé≠ Telethon –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{me.username if me.username else me.first_name}")
            print("="*60)
            print("‚úÖ TELETHON –£–°–ü–ï–®–ù–û –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù!")
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{me.username if me.username else me.first_name}")
            print("ü§ñ –≠–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞")
            print("="*60)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telethon: {e}")
            self.is_initialized = False
            return False
    
    async def _code_callback(self):
        """Callback –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        logger.info("üì± Telethon —Ç—Ä–µ–±—É–µ—Ç –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!")
        logger.info("üîî –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        print("\n" + "="*50)
        print("üì± TELETHON –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø")
        print("="*50)
        print("ÔøΩ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à Telegram –Ω–∞ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        print(f"üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {config.TELETHON_PHONE_NUMBER}")
        print("="*50)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
        code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ").strip()
        
        if code:
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {code}")
            return code
        else:
            logger.error("‚ùå –ö–æ–¥ –Ω–µ –≤–≤–µ–¥–µ–Ω")
            return None
    
    async def _password_callback(self):
        """Callback –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)"""
        logger.info("üîê Telethon —Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏!")
        print("\n" + "="*50)
        print("üîê –î–í–£–•–§–ê–ö–¢–û–†–ù–ê–Ø –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø")
        print("="*50)
        print("üîë –ü–∞—Ä–æ–ª—å –¥–ª—è 2FA –±—É–¥–µ—Ç –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        print("="*50)
        password = "Agsh@#uwi181"
        logger.info("‚úÖ –ü–∞—Ä–æ–ª—å 2FA –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        return password
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.client and self.is_initialized:
            await self.client.disconnect()
            logger.info("üîå Telethon –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
    
    def generate_response_delay(self) -> int:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –æ—Ç–≤–µ—Ç–∞ –æ—Ç 1 –¥–æ 3 –º–∏–Ω—É—Ç"""
        return random.randint(config.MIN_RESPONSE_DELAY, config.MAX_RESPONSE_DELAY)
    
    def generate_typing_delay(self) -> int:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—á–∞—Ç–∞–Ω–∏—è"""
        return random.randint(config.TYPING_DELAY_MIN, config.TYPING_DELAY_MAX)
    
    async def simulate_human_typing(self, chat_id: Union[int, str], typing_duration: Optional[int] = None):
        """
        –ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø–µ—á–∞—Ç–∞–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            typing_duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—á–∞—Ç–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ)
        """
        if not self.is_initialized:
            return
        
        try:
            if typing_duration is None:
                typing_duration = self.generate_typing_delay()
            
            logger.info(f"‚å®Ô∏è –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–µ—á–∞—Ç–∞–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id} –≤ —Ç–µ—á–µ–Ω–∏–µ {typing_duration} —Å–µ–∫—É–Ω–¥")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"
            async with self.client.action(chat_id, 'typing'):
                await asyncio.sleep(typing_duration)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–µ—á–∞—Ç–∞–Ω–∏—è: {e}")
    
    async def simulate_human_delay(self, message_text: str = "") -> int:
        """
        –ò–º–∏—Ç–∏—Ä—É–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
        
        Args:
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∏
        """
        # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        base_delay = self.generate_response_delay()
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        if message_text:
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            message_length_factor = min(len(message_text) // 100, 30)
            base_delay += message_length_factor
        
        logger.info(f"‚è∞ –ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—Ç–∞: {base_delay} —Å–µ–∫—É–Ω–¥ ({base_delay/60:.1f} –º–∏–Ω—É—Ç)")
        return base_delay
    
    async def send_message_with_human_behavior(
        self, 
        chat_id: Union[int, str], 
        message: str,
        pre_typing_delay: Optional[int] = None
    ):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            pre_typing_delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–µ—á–∞—Ç–∞–Ω–∏—è
        """
        if not self.is_initialized:
            logger.warning("‚ö†Ô∏è Telethon –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —ç–º—É–ª—è—Ü–∏–∏")
            return
        
        try:
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–µ—á–∞—Ç–∞–Ω–∏—è
            if pre_typing_delay:
                logger.info(f"‚è∏Ô∏è –ñ–¥–µ–º {pre_typing_delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º...")
                await asyncio.sleep(pre_typing_delay)
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–µ—á–∞—Ç–∞–Ω–∏–µ
            typing_duration = self.calculate_typing_duration(message)
            await self.simulate_human_typing(chat_id, typing_duration)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telethon
            await self.client.send_message(chat_id, message)
            logger.info(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id} —á–µ—Ä–µ–∑ Telethon")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telethon: {e}")
            raise
    
    def calculate_typing_duration(self, message: str) -> int:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—á–∞—Ç–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—á–∞—Ç–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        # –ë–∞–∑–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: ~40 —Å–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É –∏–ª–∏ ~200 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É
        words_count = len(message.split())
        chars_count = len(message)
        
        # –í—Ä–µ–º—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ (40 —Å–ª–æ–≤/–º–∏–Ω)
        time_by_words = (words_count / 40) * 60
        
        # –í—Ä–µ–º—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–º–≤–æ–ª–æ–≤ (200 —Å–∏–º–≤–æ–ª–æ–≤/–º–∏–Ω)
        time_by_chars = (chars_count / 200) * 60
        
        # –ë–µ—Ä–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
        base_time = (time_by_words + time_by_chars) / 2
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å ¬±50%
        random_factor = random.uniform(0.5, 1.5)
        typing_time = int(base_time * random_factor)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–µ—á–∞—Ç–∞–Ω–∏—è
        min_typing = config.TYPING_DELAY_MIN
        max_typing = min(config.TYPING_DELAY_MAX, 120)  # –º–∞–∫—Å–∏–º—É–º 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –ø–µ—á–∞—Ç–∞–Ω–∏–µ
        
        typing_time = max(min_typing, min(typing_time, max_typing))
        
        logger.debug(f"üìù –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–µ—á–∞—Ç–∞–Ω–∏—è: {typing_time} —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ {chars_count} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return typing_time
    
    async def mark_as_read(self, chat_id: Union[int, str]):
        """
        –û—Ç–º–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        
        Args:
            chat_id: ID —á–∞—Ç–∞
        """
        if not self.is_initialized:
            return
        
        try:
            await self.client.send_read_acknowledge(chat_id)
            logger.debug(f"üëÅÔ∏è –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –≤ —á–∞—Ç–µ {chat_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
human_behavior_service = HumanBehaviorService()
